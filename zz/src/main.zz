using log;
using slice;
using hex;
using buffer;
using byteorder;
using err;
using mem;
using <string.h>::{memmove};
using madpack;
using json;
using <stdio.h>::{fread, stdin,stderr, stdout, printf, fopen, fclose, FILE, fwrite};


export fn main(int argc, char ** argv) -> int
    where (usize)argc < len(argv)
{
    new+1000 e = err::make();

    new+1000000 bi = buffer::make();
    new+100000 idx = madpack::empty_index();

    bool mut mode_unpack = false;
    bool mut mode_index_make = false;


    for (usize mut i = 1; i < (usize)argc; i++) {
        if unsafe<bool>(buffer::cstr_eq(argv[i], "--unpack")) {
            mode_unpack = true;
        } else if unsafe<bool>(buffer::cstr_eq(argv[i], "--index")) {
            i += 1;
            err::assert(i < (usize)argc);

            FILE mut* fd = (FILE mut *)fopen(argv[i], "r");
            if fd == 0 {
                err::panic("cannot open %s", argv[i]);
            }
            while bi.fread(fd) {};
            fclose(fd);
            madpack::from_preshared_index(&idx, &e, bi.as_slice());
            e.abort();
            bi.clear();

        } else if unsafe<bool>(buffer::cstr_eq(argv[i], "--make-index")) {
            mode_index_make = true;
        } else {
            printf(r#"usage:  madpack [options]
  default:          json (stdin) to madpack (stdout)
  --unpack:         madpack (stdin) to json (stdout)
  --index <file>:   use preshared index to (un)pack
"#);
            return 2;

        }
    }


    while bi.fread(stdin) {};



    if mode_unpack {
        new dc = madpack::decode(bi.as_slice(), &idx);
        madpack::to_json(&dc, &e, stdout, false, 0, true);
        printf("\n");
    } else {

        new+200000 bo = buffer::make();
        new enc = madpack::encode(bo.as_mut_slice(), &idx);


        new+160000 dec = json::decode_value(&e, bi.mem, bi.at);
        e.abort();
        madpack::from_json(&dec, &enc, &e);
        e.abort();

        if mode_index_make {
            bo.clear();
            idx.to_preshared_index(bo.as_mut_slice(), &e);
            e.abort();
            fwrite(bo.mem, 1, bo.at, stdout);
        } else {
            log::info("encoded %d bytes of json into %d bytes of madpack", bi.at, bo.at);
            fwrite(bo.mem, 1, bo.at, stdout);
        }
    }


    return 0;
}


