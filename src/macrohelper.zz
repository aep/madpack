using json;
using err;
using buffer;
using log;
using madpack;
using slice;
using <stdio.h>::{stdin, printf, stderr, fprintf};
using ast;

pub fn preshare() {
    new+1000    e = err::make();
    new+100000  a = ast::from_macro();
    new+100000  b = buffer::make();

    new enc = madpack::encode(b.as_mut_slice(), 0);

    for let mut i = a.args.iter(); i.next(); {
        let arg = (ast::Expression *)i.val.mem;
        err::assert_safe(arg);

        if arg->t == ast::ExpressionType::LiteralString {
            static_attest(slice::slice::integrity(&arg->v.literal));
            enc.v_strslice(arg->v.literal);
        }
    }

    printf("slice::slice::Slice{ mem: (u8*)\"");
    for (usize mut i = 0; i < b.at; i++) {
        printf("\\x%02x", (u8)b.mem[i]);
    }
    printf("\", size: %d }", b.at);
}
