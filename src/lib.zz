using log;
using slice;
using hex;
using buffer;
using byteorder;
using err;
using mem;
using <string.h>::{memmove};
using json;
using vec;
using pool;
using madpack::macrohelper;

export symbol DecodingError;

export enum Item {
    Invalid,
    Uint,
    Sint,
    Float,
    String,
    Bytes,
    Map,
    Array,
    True,
    False,
    Null,
    End,
}

export struct Index+ {
    usize preshared_byte_at;
    vec::Vec[vec::item = char, +] items;
}

export fn empty_index(Index mut new *self, usize tail = static(len(self->items.pool.pmem)))
    where tail > 0
{
    mem::zero(self);
    self->items.make(tail);
}

export fn from_preshared_index(Index mut new *self, err::Err mut *e, slice::slice::Slice v, usize tail = static(len(self->items.pool.pmem)))
    where tail > 0
    where slice::slice::integrity(&v)
    where err::checked(*e)
{
    empty_index(self, tail);
    static_attest(vec::integrity(&self->items));

    new dc = decode(v, 0);
    while dc.next_v(e) {
        switch dc.item {
            Item::String => {
                static_attest(slice::slice::integrity(&dc.value.v_slice));
                self->items.push((char*)dc.value.v_slice.mem, dc.value.v_slice.size);
            }
            default => {
                char * nothing = "";
                self->items.push(nothing, 0);
            }
        }
   }
}

export macro preshare(){
    macrohelper::preshare();
}

export fn to_preshared_index(Index *self, slice::mut_slice::MutSlice mut sl, err::Err mut*e)
    where slice::mut_slice::integrity(&sl)
{
    static_attest(vec::integrity(&self->items));

    new enc = encode(sl, 0);
    for let mut i = self->items.iter(); i.next(); {
        static_attest(slice::slice::integrity(&i.val));
        enc.v_strslice(i.val);
    }
}

pub fn gindex(Index mut*self, slice::slice::Slice key) -> usize
    where slice::slice::integrity(&key)
{
    static_attest(vec::integrity(&self->items));

    usize mut c = 0;
    for let mut i = self->items.iter(); i.next(); {
        c += 1;
        static_attest(slice::slice::integrity(&i.val));

        if i.val.eq(key) {
            return c;
        }
    }

    self->items.push((char*)key.mem, key.size);
    return 0;
}

fn lookup(Index mut*self, u16 mut i) -> slice::slice::Slice
    model slice::slice::integrity(&return)
{
    if self == 0 {
        return slice::slice::Slice{
            mem: (u8*)"missing",
            size: 7,
        };
    }
    static_attest(vec::integrity(&self->items));

    i -=1;
    if (usize)i >= self->items.count {

        new+100 b = buffer::make();
        b.format("%d", i + 1);
        let k = b.as_slice();

        if self->items.push(b.mem, b.at) {
            static_attest(self->items.count >0);
            let sl = self->items.items[self->items.count - 1];
            static_attest(slice::slice::integrity(&sl));
            return sl;

        } else {
            return slice::slice::Slice{
                mem: (u8*)"missing",
                size: 7,
            };
        }
    }
    let sl = self->items.items[(usize)i];
    static_attest(slice::slice::integrity(&sl));
    return sl;
}


export struct Tuning {
    u8 config;
}


export struct Encoder {
    slice::mut_slice::MutSlice  sl;
    Tuning tuning;
    Index mut * unsafe index;
}

export theory integrity(Encoder mut*self) -> bool
(
    slice::mut_slice::integrity(&self->sl)
)

export fn encode(Encoder mut new*self, slice::mut_slice::MutSlice mut sl, Index mut * unsafe index)
    where slice::mut_slice::integrity(&sl)
    model integrity(self)
{
    *self = Encoder {
        sl,
        index,
    };
}

export fn as_slice(Encoder *self) -> slice::slice::Slice
    where integrity(self)
    model slice::slice::integrity(&return)

{
    return self->sl.as_slice();
}

export fn kv_uint(Encoder mut * self, slice::slice::Slice k, u64 value) -> bool
    where slice::slice::integrity(&k)
    where integrity(self)
    model integrity(self)
{
    if value <= 0xff {
        return  self->key(k, 0x00) &&
                self->sl.push((u8)value);
    } else if value <= 0xffff {
        return  self->key(k, 0x20) &&
                self->sl.push16(byteorder::to_le16((u16)value));
    } else {
        return  self->key(k, 0xe0) &&
                self->v_uint(value);
    }
}

export fn v_uint(Encoder mut * self, u64 value) -> bool
    where integrity(self)
    model integrity(self)
{
    if value <= 111 {
        return self->sl.push((u8)value);
    } else if value <= 0xff {
        return  self->sl.push(0x70) &&
                self->sl.push((u8)value);
    } else if value <= 0xffff {
        return  self->sl.push(0x71) &&
                self->sl.push16(byteorder::to_le16((u16)value));
    } else if value <= 0xffffffff{
        return  self->sl.push(0x72) &&
                self->sl.push32(byteorder::to_le32((u32)value));
    } else {
        return  self->sl.push(0x73) &&
                self->sl.push64(byteorder::to_le64((u64)value));
    }
}

export fn kv_byteslice(Encoder mut * self, slice::Slice k, slice::Slice value) -> bool
    where slice::slice::integrity(&k)
    where slice::slice::integrity(&value)
    where integrity(self)
    model integrity(self)
{
    if value.size <= 0xff {
        return  self->key(k, 0x60) &&
                self->sl.push((u8)value.size) &&
                self->sl.append_slice(value);
    } else {
        return  self->key(k, 0xe0) &&
                self->v_byteslice(value);
    }
}

export fn kv_strslice(Encoder mut * self, slice::Slice k, slice::Slice value) -> bool
    where slice::slice::integrity(&k)
    where slice::slice::integrity(&value)
    where integrity(self)
    model integrity(self)
{
    if value.size <= 0xff {
        return  self->key(k, 0x80) &&
                self->sl.push((u8)value.size) &&
                self->sl.append_slice(value);
    } else {
        return  self->key(k, 0xe0) &&
                self->v_strslice(value);
    }
}


export fn kv_cstr(Encoder mut * self, slice::Slice k, char * value) -> bool
    where slice::slice::integrity(&k)
    where nullterm(value)
    where integrity(self)
    model integrity(self)
{
    let vl = buffer::strlen(value);
    if vl <= 0xff {
        return  self->key(k, 0x80) &&
                self->sl.push((u8)vl) &&
                self->sl.append_cstr(value);
    } else {
        return  self->key(k, 0xe0) &&
                self->v_cstr(value);
    }
}

export fn v_strslice(Encoder mut * self, slice::Slice value) -> bool
    where slice::slice::integrity(&value)
    where integrity(self)
    model integrity(self)
{
    if value.size <= 0xff {
        return  self->sl.push(0x8c) &&
                self->sl.push((u8)value.size) &&
                self->sl.append_slice(value);
    } else if value.size <= 0xffff {
        return  self->sl.push(0x8d) &&
                self->sl.push16(byteorder::to_le16((u16)value.size)) &&
                self->sl.append_slice(value);
    } else if value.size <= 0xffffffff {
        return  self->sl.push(0x8e) &&
                self->sl.push32(byteorder::to_le32((u32)value.size)) &&
                self->sl.append_slice(value);
    } else {
        return  self->sl.push(0x8f) &&
                self->sl.push64(byteorder::to_le64((u64)value.size)) &&
                self->sl.append_slice(value);
    }
}

export fn v_byteslice(Encoder mut * self, slice::Slice value) -> bool
    where slice::slice::integrity(&value)
    where integrity(self)
    model integrity(self)
{
    if value.size <= 0xff {
        return  self->sl.push(0x9c) &&
                self->sl.push((u8)value.size) &&
                self->sl.append_slice(value);
    } else if value.size <= 0xffff {
        return  self->sl.push(0x9d) &&
                self->sl.push16(byteorder::to_le16((u16)value.size)) &&
                self->sl.append_slice(value);
    } else if value.size <= 0xffffffff {
        return  self->sl.push(0x9e) &&
                self->sl.push32(byteorder::to_le32((u32)value.size)) &&
                self->sl.append_slice(value);
    } else {
        return  self->sl.push(0x9f) &&
                self->sl.push64(byteorder::to_le64((u64)value.size)) &&
                self->sl.append_slice(value);
    }
}

export fn v_cstr(Encoder mut * self, char * value) -> bool
    where nullterm(value)
    where integrity(self)
    model integrity(self)
{
    let vl = buffer::strlen(value);
    if vl <= 0xff {
        return  self->sl.push(0x8c) &&
                self->sl.push((u8)vl) &&
                self->sl.append_cstr(value);
    } else if vl <= 0xffff {
        return  self->sl.push(0x8d) &&
                self->sl.push16(byteorder::to_le16((u16)vl)) &&
                self->sl.append_cstr(value);
    } else if vl <= 0xffffffff {
        return  self->sl.push(0x8e) &&
                self->sl.push32(byteorder::to_le32((u32)vl)) &&
                self->sl.append_cstr(value);
    } else {
        return  self->sl.push(0x8f) &&
                self->sl.push64(byteorder::to_le64((u64)vl)) &&
                self->sl.append_cstr(value);
    }
}

export fn kv_array(Encoder mut * self, slice::Slice k) -> bool
    where slice::integrity(&k)
    where integrity(self)
    model integrity(self)
{
    return self->key(k, 0xc0);
}

export fn v_array(Encoder mut * self) -> bool
    where integrity(self)
    model integrity(self)
{
    return self->sl.push(0x7c);
}

export fn kv_map(Encoder mut * self, slice::Slice k) -> bool
    where slice::integrity(&k)
    where integrity(self)
    model integrity(self)
{
    return self->key(k, 0xa0);
}

export fn v_map(Encoder mut * self) -> bool
    where integrity(self)
    model integrity(self)
{
    return self->sl.push(0x7b);
}

export fn end(Encoder mut * self) -> bool
    where integrity(self)
    model integrity(self)
{
    return self->sl.push(0xff);
}





export fn kv_null(Encoder mut * self, slice::Slice k) -> bool
    where slice::integrity(&k)
    where integrity(self)
    model integrity(self)
{
    return  self->key(k, 0xe0) &&
            self->sl.push(0x78);
}

export fn v_null(Encoder mut * self) -> bool
    where integrity(self)
    model integrity(self)
{
    return self->sl.push(0x78);
}

export fn kv_bool(Encoder mut * self, slice::Slice k, bool value) -> bool
    where slice::integrity(&k)
    where integrity(self)
    model integrity(self)
{
    if value {
        return  self->key(k, 0xe0) &&
                self->sl.push(0x79);
    } else {
        return  self->key(k, 0xe0) &&
                self->sl.push(0x7a);
    }
}

export fn v_bool(Encoder mut * self, bool value) -> bool
    where integrity(self)
    model integrity(self)
{
    if value {
        return self->sl.push(0x79);
    } else {
        return self->sl.push(0x7a);
    }
}

fn key(Encoder mut * self, slice::Slice k, u8 valbits) -> bool
    where slice::integrity(&k)
    where integrity(self)
    model integrity(self)
{
    usize mut idx = 0;
    if self->index != 0 {
        static_attest(safe(self->index));
        idx = gindex(self->index, k);
    }

    if idx != 0 {
        if idx <= 0x1a {
            return self->sl.push((u8)idx | valbits);
        } else if idx <= 0xff {
            return self->sl.push(0x1b | valbits) && self->sl.push((u8)idx);
        } else {
            return self->sl.push(0x1c | valbits) && self->sl.push16(byteorder::to_le16(idx));
        }
    }

    if k.size < 0xff {
        return  self->sl.push(valbits | 0x1d) &&
                self->sl.push((u8)k.size) &&
                self->sl.append_slice(k);
    } else if k.size < 0xffff {
        return  self->sl.push(valbits | 0x1e) &&
                self->sl.push16(byteorder::to_le16((u16)k.size)) &&
                self->sl.append_slice(k);
    } else {
        log::warn("key too long: \"%.*s\"", k.size, k.mem);
        return false;
    }



    return true;
}


// ------- decoder


export union Value {
    u64                     v_uint;
    i64                     v_sint;
    f64                     v_float;
    slice::slice::Slice     v_slice;
}


export struct Decoder
{
    slice::slice::Slice sl;
    usize mut at;
    Index mut * unsafe index;

    slice::Slice    key;
    Item            item;
    Value           value;
}


export fn decode(Decoder mut new * self, slice::slice::Slice sl, Index mut * unsafe index)
    where slice::slice::integrity(&sl)
{
    mem::zero(self);
    self->sl = sl;
    self->index = index;
}

export fn next_kv(Decoder mut new * self, err::Err mut *e) -> bool
    model slice::slice::integrity(&self->key)
    where err::checked(*e)
{
    static_attest(slice::slice::integrity(&self->sl));
    static_attest(safe(self->index));
    static_attest(slice::slice::integrity(&self->key));

    if self->at >= self->sl.size {
        return false;
    }

    u8 c = self->sl.mem[self->at];
    self->at += 1;

    u16 mut idxt = (u16)(c & 0x1f);
    switch idxt {
        0x00 => {
            return false;
        }
        0x1b => {
            if self->at >= self->sl.size {
                return false;
            }
            idxt = (u16)self->sl.mem[self->at];
            self->at += 1;
            self->key = self->index->lookup(idxt);
        }
        0x1c => {
            static_attest(self->at < self->sl.size);
            if self->at + 2 >= self->sl.size  || self->at  >= self->sl.size {
                return false;
            }

            u8 mut * m = (u8 mut*)&idxt;
            static_attest(len(m) == 2);
            mem::copy(self->sl.mem + self->at, m, 2);
            idxt = (u16)byteorder::from_le16(idxt);
            self->at += 2;
            self->key = self->index->lookup(idxt);
        }
        0x1d => {
            static_attest(self->at < self->sl.size);

            if self->at >= self->sl.size {
                return false;
            }
            idxt = (u16)self->sl.mem[self->at];
            self->at += 1;

            if self->at >= self->sl.size {
                return false;
            }

            self->key = slice::slice::Slice {
                mem:    self->sl.mem + self->at,
                size:   (usize)idxt,
            };
            self->at += (usize)idxt;
            static_attest(slice::slice::integrity(&self->key));
            if self->index != 0 {
                self->index->gindex(self->key);
            }

        }
        0x1e => {
            static_attest(self->at < self->sl.size);

            if self->at + 2 >= self->sl.size  || self->at  >= self->sl.size {
                return false;
            }

            u8 mut * m = (u8 mut*)&idxt;
            static_attest(len(m) == 2);
            mem::copy(self->sl.mem + self->at, m, 2);
            idxt = (u16)byteorder::from_le16(idxt);
            self->at += 2;

            self->key = slice::slice::Slice {
                mem:    self->sl.mem + self->at,
                size:   (usize)idxt,
            };
            static_attest(slice::slice::integrity(&self->key));
            self->at += (usize)idxt;
            if self->index != 0 {
                self->index->gindex(self->key);
            }
        }
        0x1f => {
            self->item = Item::End;
            return true;
        }
        default => {
            self->key = self->index->lookup(idxt);
        }
    }

    u8 vt = c & 0xe0;
    switch vt {
        0x00 => {
            self->item = Item::Uint;

            if self->at >= self->sl.size {
                return false;
            }

            u8 val = self->sl.mem[self->at];
            self->value.v_uint = (u64)val;
            self->at += 1;
        }
        0x20  => {
            self->item = Item::Uint;

            if self->at + 2 > self->sl.size  || self->at  >= self->sl.size {
                e->fail(DecodingError, "short read %d", vt);
                return false;
            }

            u16 mut val = 0;
            u8 mut * m = (u8 mut*)&val;
            static_attest(len(m) == 2);
            mem::copy(self->sl.mem + self->at, m, 2);
            self->value.v_uint = (u64)byteorder::from_le16(val);
            self->at += 2;
        }
        0x40 => {
            self->item = Item::Float;

            if self->at + 4 > self->sl.size  || self->at  >= self->sl.size {
                return false;
            }

            u32 mut val = 0;
            u8 mut * m = (u8 mut*)&val;
            static_attest(len(m) == 4);
            mem::copy(self->sl.mem + self->at, m, 4);
            self->value.v_float = (f64)((f32)byteorder::from_le32(val));
            self->at += 4;
        }

        0x60, 0x80 => {
            switch vt {
                0x60 => {
                    self->item = Item::Bytes;
                }
                0x80 => {
                    self->item = Item::String;
                }
            }

            if self->at >= self->sl.size {
                return false;
            }
            usize l = (usize)self->sl.mem[self->at];
            self->at += 1;

            if l == 0 {
                slice::slice::empty(&self->value.v_slice);
            } else {
                if self->at >= self->sl.size || self->at + l > self->sl.size{
                    return false;
                }

                self->value.v_slice = slice::slice::Slice {
                    mem: self->sl.mem + self->at,
                    size: l
                };
                self->at += l;
            }
        }
        0xa0 => {
            self->item = Item::Map;
        }
        0xc0 => {
            self->item = Item::Array;
        }
        0xe0 => {
            return self->next_v(e);
        }
    }
    return true;
}


export fn next_v(Decoder mut new * self, err::Err mut *e) -> bool
    where err::checked(*e)
{
    static_attest(slice::slice::integrity(&self->sl));
    static_attest(safe(self->index));

    if self->at >= self->sl.size {
        return false;
    }

    u8 eb = self->sl.mem[self->at];
    self->at += 1;
    switch eb {
        0x70, 0x74  => {
            switch eb {
                0x70    => { self->item = Item::Uint; }
                0x74    => { self->item = Item::Sint; }
            }

            if self->at >= self->sl.size {
                return false;
            }

            u8 val = self->sl.mem[self->at];
            self->value.v_uint = (u64)val;
            self->at += 1;
        }
        0x71, 0x75 => {
            switch eb {
                0x71    => { self->item = Item::Uint; }
                0x75    => { self->item = Item::Sint; }
            }

            if self->at + 2 > self->sl.size  || self->at  >= self->sl.size {
                return false;
            }

            u16 mut val = 0;
            u8 mut * m = (u8 mut*)&val;
            static_attest(len(m) == 2);
            mem::copy(self->sl.mem + self->at, m, 2);
            self->value.v_uint = (u64)byteorder::from_le16(val);
            self->at += 2;
        }
        0x72, 0x76,0x7d => {
            switch eb {
                0x72    => { self->item = Item::Uint;   }
                0x76    => { self->item = Item::Sint;   }
                0x7d    => { self->item = Item::Float;  }
            }

            if self->at + 4 > self->sl.size  || self->at  >= self->sl.size {
                return false;
            }

            u32 mut val = 0;
            u8 mut * m = (u8 mut*)&val;
            static_attest(len(m) == 4);
            mem::copy(self->sl.mem + self->at, m, 4);
            self->value.v_uint = (u64)byteorder::from_le32(val);
            self->at += 4;
        }
        0x73, 0x77, 0x7e => {
            switch eb {
                0x73    => { self->item = Item::Uint; }
                0x77    => { self->item = Item::Sint; }
                0x7e    => { self->item = Item::Float;  }
            }

            if self->at + 8 > self->sl.size  || self->at  >= self->sl.size {
                return false;
            }

            u64 mut val = 0;
            u8 mut * m = (u8 mut*)&val;
            static_attest(len(m) == 8);
            mem::copy(self->sl.mem + self->at, m, 8);
            self->value.v_uint = byteorder::from_le64(val);
            self->at += 8;
        }
        0x78 => {
            self->item = Item::Null;
        }
        0x79 => {
            self->item = Item::True;
        }
        0x7a => {
            self->item = Item::False;
        }
        0x7b => {
            self->item = Item::Map;
        }
        0x7c => {
            self->item = Item::Array;
        }
        0xff => {
            self->item = Item::End;
        }
        0x80, 0x90 => {
            switch eb{
                0x80 => { self->item = Item::String; }
                0x90 => { self->item = Item::Bytes;  }
            }
            slice::slice::empty(&self->value.v_slice);
        }
        0x8c, 0x9c => {
            static_attest(self->at < self->sl.size);
            switch eb{
                0x8c => { self->item = Item::String; }
                0x9c => { self->item = Item::Bytes;  }
            }
            slice::slice::empty(&self->value.v_slice);

            if self->at >= self->sl.size || self->at + 1 > self->sl.size{
                e->fail(DecodingError,"8bit len short read");
                return false;
            }

            let size  = (usize)self->sl.mem[self->at];
            self->at += 1;
            if size == 0 {
                self->value.v_slice = slice::slice::Slice {
                    mem: 0,
                    size: 0,
                };
            } else {
                self->value.v_slice = slice::slice::Slice {
                    mem:    unsafe<u8*>(self->sl.mem + self->at),
                    size:   size,
                };
            }
            self->at += size;
        }
        0x8d, 0x9d => {
            static_attest(self->at < self->sl.size);
            switch eb{
                0x8d => { self->item = Item::String; }
                0x9d => { self->item = Item::Bytes;  }
            }
            slice::slice::empty(&self->value.v_slice);

            if self->at >= self->sl.size || self->at + 2 >  self->sl.size{
                e->fail(DecodingError,"16bit len short read");
                return false;
            }

            u16 mut val = 0;
            u8 mut * m = (u8 mut*)&val;
            static_attest(len(m) == 2);
            mem::copy(self->sl.mem + self->at, m, 2);
            self->at += 2;
            usize size = (usize)byteorder::from_le16(val);

            self->value.v_slice = slice::slice::Slice {
                mem:    self->sl.mem + self->at,
                size:   size,
            };
            self->at += size;
        }
        0x8e, 0x9e => {
            static_attest(self->at < self->sl.size);
            switch eb{
                0x8e => { self->item = Item::String; }
                0x9e => { self->item = Item::Bytes;  }
            }
            slice::slice::empty(&self->value.v_slice);

            if self->at >= self->sl.size || self->at + 4 >  self->sl.size{
                e->fail(DecodingError,"32bit len short read");
                return false;
            }

            u32 mut val = 0;
            u8 mut * m = (u8 mut*)&val;
            static_attest(len(m) == 4);
            mem::copy(self->sl.mem + self->at, m, 4);
            self->at += 4;
            usize size = (usize)byteorder::from_le32(val);

            self->value.v_slice = slice::slice::Slice {
                mem:    self->sl.mem + self->at,
                size:   size,
            };
            self->at += size;
        }
        0x8f, 0x9f  => {
            static_attest(self->at < self->sl.size);
            switch eb{
                0x8f => { self->item = Item::String; }
                0x9f => { self->item = Item::Bytes;  }
            }
            slice::slice::empty(&self->value.v_slice);

            if self->at >= self->sl.size || self->at + 8 >  self->sl.size{
                e->fail(DecodingError,"64bit len short read");
                return false;
            }

            u64  mut val = 0;
            u8 mut * m = (u8 mut*)&val;
            static_attest(len(m) == 8);
            mem::copy(self->sl.mem + self->at, m, 8);
            self->at += 8;
            usize size = (usize)byteorder::from_le64(val);

            self->value.v_slice = slice::slice::Slice {
                mem:    self->sl.mem + self->at,
                size:   size,
            };
            self->at += size;
        }
        default => {
            if eb <= 0x6f {
                self->item = Item::Uint;
                self->value.v_uint = (u64)eb
            } else {
                let size  = (usize)(eb & 0x0f);
                if self->at >= self->sl.size || self->at + size > self->sl.size{
                    e->fail(DecodingError,"sized short read");
                    return false;
                }
                self->value.v_slice = slice::slice::Slice {
                    mem:    self->sl.mem + self->at,
                    size:   size,
                };
                self->at += size;
                switch eb & 0xf0 {
                    0x80 => { self->item = Item::String; }
                    0x90 => { self->item = Item::Bytes;  }
                    default => {return false; }
                }
            }
        }
    }
    if self->at > self->sl.size {
        e->fail(DecodingError,"value short read");
        return false;
    }
    return true;
}

/// skip over current field and all children
export fn skip(Decoder mut new * self, err::Err mut *e )
    where err::checked(*e)
{
    switch self->item {
        Item::Map => {
            while self->next_kv(e) {
                static_attest(err::checked(*e));
                if self->item == Item::End {
                    return;
                }
                self->skip(e)
            }
        }
        Item::Array => {
            while self->next_v(e) {
                static_attest(err::checked(*e));
                if self->item == Item::End {
                    return;
                }
                self->skip(e)
            }
        }
        default => {
        }
    }
}


using <stdio.h>::{FILE, fprintf};
export fn to_json(Decoder mut * dc, err::Err mut *e, FILE mut* unsafe fd, bool ismap, usize indent, bool pretty)
    where err::checked(*e)
{
    bool mut first = true;
    for (;;) {
        if ismap {
            if !dc->next_kv(e) {
                break;
            }
        } else {
            if !dc->next_v(e) {
                break;
            }
        }
        static_attest(err::checked(*e));
        if dc->item == Item::End {
            break;
        }
        if first {
            first = false;
            if pretty {
                fprintf(fd,"\n");
            }
        } else {
            if pretty {
                fprintf(fd,",\n");
            } else {
                fprintf(fd,",");
            }
        }

        if pretty {
            for (usize mut i = 0; i < indent; i++) {
                fprintf(fd,"  ");
            }
        }

        if ismap {
            fprintf(fd,"\"%.*s\":", dc->key.size, dc->key.mem);
        }
        switch dc->item {
            Item::Invalid   => {
                fprintf(fd,"\"invalid\"");
            }
            Item::Null      => {
                fprintf(fd,"null");
            }
            Item::True      => {
                fprintf(fd,"true");
            }
            Item::False     => {
                fprintf(fd,"false");
            }
            Item::Float     => {
                fprintf(fd,"%f", dc->value.v_float);
            }
            Item::Uint      => {
                fprintf(fd,"%llu", dc->value.v_uint);
            }
            Item::Sint      => {
                fprintf(fd,"%d", dc->value.v_sint);
            }
            Item::String    => {
                fprintf(fd,"\"%.*s\"", dc->value.v_slice.size, dc->value.v_slice.mem);
            }
            Item::Bytes     => {
                fprintf(fd,"\"");
                for (usize mut i = 0; i < dc->value.v_slice.size; i++) {
                    unsafe { fprintf(fd, "%02x", dc->value.v_slice.mem[i]); }
                }
                fprintf(fd,"\"");
            }
            Item::Map       => {
                fprintf(fd,"{");
                to_json(dc, e, fd, true, indent + 1, pretty);
                if pretty {
                    fprintf(fd,"\n");
                }
                if pretty {
                    for (usize mut i = 0; i < indent; i++) {
                        fprintf(fd,"  ");
                    }
                }
                fprintf(fd,"}");
            }
            Item::Array     => {
                fprintf(fd,"[");
                to_json(dc, e, fd, false, indent + 1, pretty );
                if pretty {
                    fprintf(fd,"\n");
                }
                if pretty {
                    for (usize mut i = 0; i < indent; i++) {
                        fprintf(fd,"  ");
                    }
                }
                fprintf(fd,"]");
            }
        }
    }
}

export fn from_json(json::Decoder mut *dec, Encoder mut * enc,  err::Err mut *e)
    where err::checked(*e)
    where integrity(enc)
{
    while dec->next(e) {
        switch dec->item {
            json::Item::Array => {
                if dec->key.mem != 0 {
                    enc->kv_array(dec->key);
                } else {
                    enc->v_array();
                }
                from_json(dec, enc, e);
            }
            json::Item::Map => {
                if dec->key.mem != 0 {
                    enc->kv_map(dec->key);
                } else {
                    enc->v_map();
                }
                from_json(dec, enc, e);
            }
            json::Item::DirtyString => {
            }
            json::Item::String => {
                if dec->key.mem != 0 {
                    enc->kv_strslice(dec->key, dec->val);
                } else {
                    enc->v_strslice(dec->val);
                }
            }
            json::Item::Uint => {
                let v = dec->val.atoi(10);
                if dec->key.mem != 0 {
                    enc->kv_uint(dec->key, v);
                } else {
                    enc->v_uint(v);
                }
            }
            json::Item::False => {
                if dec->key.mem != 0 {
                    enc->kv_bool(dec->key, false);
                } else {
                    enc->v_bool(false);
                }
            }
            json::Item::True => {
                if dec->key.mem != 0 {
                    enc->kv_bool(dec->key, true);
                } else {
                    enc->v_bool(true);
                }
            }
            json::Item::Null => {
                if dec->key.mem != 0 {
                    enc->kv_null(dec->key);
                } else {
                    enc->v_null();
                }
            }
        }
    }
    enc->end();
}
